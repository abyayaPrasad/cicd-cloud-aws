version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - SOURCE_VERSION=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - pip3 install --upgrade pip
      - pip3 install --upgrade awscli aws-sam-cli
      - pip3 install --force-reinstall "cryptography==38.0.4"
      - pip3 install pylint
      - pip3 install moto
      - pip3 install pandas
      - pip3 install pytest
      - pip3 install pytest-cov
  build:
    commands:
       - >-
          echo "Executing actions for ${STAGE_NAME}"

          if [ "${STAGE_NAME}" = "dev" ]; then
            echo "updating lambda code "
            cd lambda-functions/sc-dataorch-decisionflag-fn1-pre-get-results-functions/
            pwd
            zip -r sc-fn1-get-function-names.zip lambda_function.py
            ls -latrh
            aws s3 cp ./sc-fn1-get-function-names.zip s3://${CICD_BUCKET}/
            #update the Lambda Code
            aws update-function-code --function-name <value> [--zip-file <value>] [--s3-bucket <value>] [--s3-key <value>]
            
            cd ../..
            pwd
            
          # elif [ "${STAGE_NAME}" = "prod" ]; then
          #   echo "copy files to prod folder"

          #   sam build --template $TEMPLATE --manifest $MANIFEST

          #   echo "starting sam package"
          #   sam package -t $TEMPLATE --output-template-file ${GIT_REPO}.yaml --s3-bucket $CICD_BUCKET --s3-prefix ${APP_PREFIX}-${GIT_REPO}/prod

          #   zip -r internal.zip ${GIT_REPO}.yaml
          #   zip -r versioned.zip ${GIT_REPO}-${SOURCE_VERSION}.yaml
          #   pwd
          #   aws s3 cp internal.zip s3://${CICD_BUCKET}/${APP_PREFIX}-${GIT_REPO}/${STAGE_NAME}/internal.zip

          #   #aws s3 sync s3://${CICD_BUCKET}/${APP_PREFIX}-${GIT_REPO}/dev/src/ s3://${CICD_BUCKET}/${APP_PREFIX}-${GIT_REPO}/${STAGE_NAME}/src/

          #   aws s3 cp ${PROD_BUILD_SPEC} s3://${CICD_BUCKET}/${APP_PREFIX}-${GIT_REPO}/${STAGE_NAME}/ --sse aws:kms --sse-kms-key-id ${KEY_ID}
          # fi
